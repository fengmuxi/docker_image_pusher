name: Docker-Build

on:
  issues:
    types:
      - opened

# https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
permissions:
  issues: write


env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"

jobs:

  build:
    name: Pull
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'build image')
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: Check Issue
      id: get-image
      env:
        IMAGE: "${{ github.event.issue.title }}"
      run: |
        ORIGIN_IMAGE="${IMAGE}"
        ISSUE_BODY="${{ github.event.issue.body }}"
        # 提取构建镜像密码
        BUILD_PASSWORD=$(echo "$ISSUE_BODY" | awk -F '\n' '/构建镜像密码/ {getline; getline; print $0}' | sed 's/^[[:space:]]*//')
        # echo "构建镜像密码: $BUILD_PASSWORD"
        sudo chmod +x ./hack/verify.sh
        PASSWORD="$(./hack/verify.sh "${BUILD_PASSWORD}")"
        if [[ "${PASSWORD}" == "" ]]; then
        gh issue comment ${{ github.event.issue.number }} -b "构建镜像 '${ORIGIN_IMAGE}' 密码错误，请联系管理员"
        exit 1
        else
        NEW_ISSUE_BODY=$(echo "${{ github.event.issue.body }}" | awk -v password="${BUILD_PASSWORD}" '{gsub(password, "******"); print}')
        echo "新的issue内容: $NEW_ISSUE_BODY"
        gh issue edit ${{ github.event.issue.number }} --body "${NEW_ISSUE_BODY}"
        fi
        
        sudo chmod +x ./hack/supply-image.sh
        CORRECT_IMAGE="$(./hack/supply-image.sh "${ORIGIN_IMAGE}")"
        if [[ "${CORRECT_IMAGE}" == "" ]]; then
        gh issue comment ${{ github.event.issue.number }} -b "镜像 '${ORIGIN_IMAGE}' 名称不符合规范"
        exit 1
        fi
        
        # 提取构建镜像 DockerFile 内容
        BUILD_DOCKERFILE=$(echo "$ISSUE_BODY" | awk -v RS= -F '\n' '/构建镜像DockerFile/ {print $0}' | sed -n '/^# 请提供构建镜像的DockerFile内容/,$p' | sed '1d' | sed 's/^[[:space:]]*//')
        echo "构建镜像 DockerFile 内容:"
        echo "$BUILD_DOCKERFILE"
        echo "$BUILD_DOCKERFILE" > /tmp/Dockerfile
        
        echo "构建镜像 DockerFile 文件内容:"
        cat /tmp/Dockerfile
        echo "image=${ORIGIN_IMAGE}" >> $GITHUB_OUTPUT

    - name: Check Image
      run: |
        ORIGIN_IMAGE="${{ steps.get-image.outputs.image }}"
        gh issue comment ${{ github.event.issue.number }} -b "镜像 ${ORIGIN_IMAGE} 构建中...<br>[详情请查看](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"

    - name: Before freeing up disk space
      run: |
        echo "Before freeing up disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    # 增加可用磁盘空间
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 2048
        swap-size-mb: 128
        remove-dotnet: 'true'
        remove-haskell: 'true'
        # 如果空间还是不够用，可以把以下开启，清理出更多空间
        # remove-android: 'true'
        # remove-codeql: 'true'
        build-mount-path: '/var/lib/docker/'

    - name: Restart docker
      run: sudo service docker restart

    - name: Free up disk space complete
      run: |
        echo "Free up disk space complete"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push image Aliyun
      run: |
        ORIGIN_IMAGE="${{ steps.get-image.outputs.image }}"
        docker login -u $ALIYUN_REGISTRY_USER -p $ALIYUN_REGISTRY_PASSWORD $ALIYUN_REGISTRY
        # 数据预处理,判断镜像是否重名
        declare -A duplicate_images
        declare -A temp_map
        
        # 获取镜像名:版本号  例如nginx:1.25.3
        image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
        echo "image_name_tag $image_name_tag"
        # 获取镜像名例如nginx
        image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')
        echo "image_name: $image_name"
        
        # 如果镜像存在于数组中，则添加temp_map
        if [[ -n "${temp_map[$image_name]}" ]]; then
              # 如果temp_map已经存在镜像名，判断是不是同一命名空间
              if [[ "${temp_map[$image_name]}" != $name_space  ]]; then
                echo "duplicate image name: $image_name"
                duplicate_images[$image_name]="true"
              fi
        else
            # 存镜像的命名空间
            temp_map[$image_name]=$name_space
        fi       
        
        
        echo "docker build -t ${ORIGIN_IMAGE} -f /tmp/Dockerfile ."
        docker build -t ${ORIGIN_IMAGE} -f /tmp/Dockerfile .
        # 将@sha256:等字符删除
        new_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/${image_name_tag}"
        echo "docker tag $image $new_image"
        docker tag $image $new_image
        echo "docker push $new_image"
        docker push $new_image
        echo "开始清理磁盘空间"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="
        docker rmi $image
        docker rmi $new_image
        echo "磁盘空间清理完毕"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="
        gh issue comment ${{ github.event.issue.number }} -b "镜像 ${ORIGIN_IMAGE} 构建完成<br>请使用 $new_image 替代源镜像"
        gh issue edit ${{ github.event.issue.number }} --add-label "build image succeeded" -b "IMAGE BUILD"
        gh issue close ${{ github.event.issue.number }} --reason "completed"

    - name: Fail Sync
      if: failure()
      run: |
        ORIGIN_IMAGE="${{ steps.get-image.outputs.image }}"
        gh issue comment ${{ github.event.issue.number }} -b "镜像 ${ORIGIN_IMAGE} 构建失败[详情请查看](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})<br>如有疑问请回复 /auto-cc 召唤帮助, 或者查看[构建成功案例](https://github.com/${{ github.repository }}/issues?q=is%3Aissue+is%3Aclosed+label%3A%22build+image+succeeded%22)"
        gh issue edit ${{ github.event.issue.number }} --add-label "build image failure" -b "IMAGE BUILD"
        gh issue close ${{ github.event.issue.number }} --reason "not planned"
